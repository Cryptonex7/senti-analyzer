{"version":3,"sources":["assets/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","text","setText","pending","setPending","op","setOp","className","src","logo","alt","TextField","fullWidth","onChange","e","target","value","variant","label","Divider","CircularProgress","Button","disabled","length","onClick","fetch","method","body","then","response","data","console","log","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,kOCmE5BC,MA3Df,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGOJ,mBAAS,mCAHhB,mBAGNK,EAHM,KAGFC,EAHE,KAmBb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,mDAEA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,yBAAKH,UAAU,aACb,kBAACI,EAAA,EAAD,CACEC,WAAS,EACTC,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOC,QAClCC,QAAQ,WACRC,MAAM,kBACNX,UAAU,UAGZ,6BACA,6BACA,kBAACY,EAAA,EAAD,MACA,6BAEChB,EAAU,kBAACiB,EAAA,EAAD,MAAuB,yBAAKb,UAAU,UAAUF,GAE3D,6BACA,6BAEA,kBAACgB,EAAA,EAAD,CACEC,UAAWrB,EAAKsB,OAChBC,QA1CW,WACnBpB,GAAW,GACXqB,MAAM,qDAAsD,CAC1DC,OAAQ,OACRC,KAAK,GAAD,OAAK1B,KAER2B,MAAK,SAACC,GAAD,OAAcA,EAAS5B,UAC5B2B,MAAK,SAACE,GACLC,QAAQC,IAAIF,GACZxB,EAAMwB,GACN1B,GAAW,OAiCPa,QAAQ,WACRgB,MAAM,WAJR,cCzCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.d278783f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Button from \"@material-ui/core/Button\";\nimport logo from \"./assets/logo.svg\";\nimport \"./App.css\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [pending, setPending] = useState(false);\n  const [op, setOp] = useState(\"Enter Text to Analyse Sentiment\");\n\n  const handleSubmit = () => {\n    setPending(true);\n    fetch(\"https://text-analysis-api-eta.now.sh/get_sentiment\", {\n      method: 'POST',\n      body: `${text}`\n      \n    }).then((response) => response.text())\n      .then((data) => {\n        console.log(data)\n        setOp(data);\n        setPending(false);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sentiment-Analyzer!</h1>\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <div className=\"container\">\n          <TextField\n            fullWidth\n            onChange={(e) => setText(e.target.value)}\n            variant=\"outlined\"\n            label=\"Enter Sentiment\"\n            className=\"input\"\n          />\n\n          <br />\n          <br />\n          <Divider />\n          <br />\n\n          {pending ? <CircularProgress /> : <div className=\"output\">{op}</div>}\n\n          <br />\n          <br />\n\n          <Button\n            disabled={!text.length}\n            onClick={handleSubmit}\n            variant=\"outlined\"\n            color=\"primary\"\n          >\n            Submit\n          </Button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}